name: Aggregate student portfolios
on:
  schedule:
    - cron: '0 5 * * *' # daily 05:00 UTC
  workflow_dispatch:

permissions:
  contents: write

jobs:
  aggregate:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Pages repo
        uses: actions/checkout@v4
        with:
          persist-credentials: true

      - name: Gather student repositories and README bios
        uses: actions/github-script@v7
        id: gather
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const org = context.repo.owner;
            const topic = (process.env.PORTFOLIO_TOPIC || 'cyber-portfolio');
            const repos = await github.paginate(github.rest.repos.listForOrg, { org, per_page: 100 });
            const filtered = [];
            for (const r of repos) {
              let topics = [];
              try {
                const t = await github.rest.repos.getAllTopics({ owner: r.owner.login, repo: r.name });
                topics = t.data.names || [];
              } catch (e) { /* ignore */ }
              const isPortfolio = topics.includes(topic) || /portfolio/i.test(r.name) || /^student-/i.test(r.name);
              if (!isPortfolio) continue;

              // read README or use description
              let bio = r.description || '';
              try {
                const readme = await github.rest.repos.getReadme({ owner: r.owner.login, repo: r.name });
                const content = Buffer.from(readme.data.content, readme.data.encoding).toString();
                const paragraphs = content.split(/\r?\n\r?\n/).map(p => p.trim()).filter(Boolean);
                if (paragraphs.length) bio = paragraphs[0].replace(/\r?\n/g, ' ');
              } catch (e) { /* ignore */ }

              let avatar_url = '';
              try {
                const owner = await github.rest.users.getByUsername({ username: r.owner.login });
                avatar_url = owner.data.avatar_url;
              } catch (e) { /* ignore */ }

              filtered.push({
                name: (r.owner.login === org) ? r.name.replace(/-portfolio/i,'').replace(/_/g,' ') : r.name,
                repo_name: r.name,
                url: r.html_url,
                title: r.description || '',
                bio,
                avatar_url
              });
            }
            filtered.sort((a,b)=>a.name.localeCompare(b.name));
            const yaml = require('js-yaml');
            const fs = require('fs');
            fs.writeFileSync('_data/students.yml', yaml.dump(filtered), 'utf8');
            return { count: filtered.length };

      - name: Commit students.yml if changed
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "chore: update aggregated students (count: ${{ steps.gather.outputs.count }})"
          file_pattern: _data/students.yml
          push: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}